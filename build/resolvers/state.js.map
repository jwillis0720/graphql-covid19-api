{"version":3,"sources":["../../src/resolvers/state.js"],"names":["stateObject","timeline","state","_","dataSources","ncapi","getTimeLinebyState","stateTimeLine","daterequested","undefined","filter","key","Date","datereadable","getTime","stateName","csv","getStateInfo","stateObj","filteredStateObj","obj","State","toLowerCase","length","Error","mappedObj","lat","Latitude","lon","Longitude","population","pop","landarea","LandAreami2","map","stateinfo","yesterdayCases","getYesterday","response","todayCases","yesterdayDeaths","todayDeaths","county","__","getCounties","filtedResponse","province","reduceCounty","info","console","log"],"mappings":"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","sourcesContent":["const stateObject = {\n  timeline: async (state, _, { dataSources }) => {\n    let stateTimeLine = await dataSources.ncapi.getTimeLinebyState(state.state);\n    const daterequested = state.daterequested;\n    if (daterequested != undefined) {\n      //because these are updated with local times we have to convert the datereadable bakc into a time\n      stateTimeLine = stateTimeLine.filter((key) => {\n        return new Date(key.datereadable).getTime() == daterequested.getTime();\n      });\n    }\n\n    ///lets hamefisttedly add a stateobject to the timeline too\n    const stateName = state.state;\n    const stateObj = await dataSources.csv.getStateInfo();\n    const filteredStateObj = stateObj.filter(\n      (obj) => obj.State.toLowerCase() === stateName.toLowerCase()\n    );\n    if (filteredStateObj.length > 1) {\n      throw new Error(`${state},returns ambiguous for info query`);\n    }\n    const mappedObj = {\n      lat: filteredStateObj[0].Latitude,\n      lon: filteredStateObj[0].Longitude,\n      population: filteredStateObj[0].pop,\n      landarea: filteredStateObj[0].LandAreami2,\n    };\n\n    return stateTimeLine.map((obj) => {\n      return { stateinfo: mappedObj, ...obj };\n    });\n  },\n  yesterdayCases: async (state, _, { dataSources }) => {\n    const response = await dataSources.ncapi.getYesterday(state.state);\n    // console.log(response)\n    return response.todayCases;\n  },\n  yesterdayDeaths: async (state, _, { dataSources }) => {\n    const response = await dataSources.ncapi.getYesterday(state.state);\n    return response.todayDeaths;\n  },\n  county: async (state, __, { dataSources }) => {\n    const response = await dataSources.ncapi.getCounties();\n    const filtedResponse = response\n      .filter((county) => {\n        return county.province === state.state;\n      })\n      .map((key) => dataSources.ncapi.reduceCounty(key));\n    // console.log(filtedResponse);\n    return filtedResponse;\n  },\n  info: async (state, _, { dataSources }) => {\n    const stateName = state.state;\n    const stateObj = await dataSources.csv.getStateInfo();\n    const filteredStateObj = stateObj.filter(\n      (obj) => obj.State.toLowerCase() === stateName.toLowerCase()\n    );\n    if (filteredStateObj.length > 1) {\n      throw new Error(`${state},returns ambiguous for info query`);\n    }\n    console.log(filteredStateObj);\n    const mappedObj = {\n      lat: filteredStateObj[0].Latitude,\n      lon: filteredStateObj[0].Longitude,\n      population: filteredStateObj[0].pop,\n      landarea: filteredStateObj[0].LandAreami2,\n    };\n    return mappedObj;\n    // console.log(stateObj.filter((obj) => obj.StateLong.toLowerCase() === stateName.toLowerCase()));\n    // console.log(csvObj.filter((locationobj) => {\n    //   return location.\n  },\n};\nexport default stateObject;\n"],"file":"state.js"}