{"version":3,"sources":["../../src/resolvers/query.js"],"names":["queryObject","AllCountries","_parent","_args","dataSources","ncapi","getCountries","CountryByID","_","id","getCountrybyID","CountryByIDs","ids","map","CountryByName","name","getCountryByName","CountryByNames","names","CountryByDate","date","countryObject","daterequested","AllStates","getStates","StateByName","console","log","getStatebyName","StateByNames","StateByDate","stateObject","AllCounties","getCounties","CountyByName","state","getCountyByName","countyByName","length","Error","CountyByNames","states","results","index","undefined","error","Promise","all","CountyByDate"],"mappings":"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","sourcesContent":["import \"regenerator-runtime/runtime.js\";\n\nconst queryObject = {\n  AllCountries: (_parent, _args, { dataSources }) => {\n    return dataSources.ncapi.getCountries();\n  },\n  CountryByID: (_, { id }, { dataSources }) => {\n    return dataSources.ncapi.getCountrybyID(id);\n  },\n  CountryByIDs: (_, { ids }, { dataSources }) => {\n    // no reseaon to return promise.all since get country by id is not returning promises\n    return ids.map((id) => dataSources.ncapi.getCountrybyID(id));\n  },\n  CountryByName: (_, { name }, { dataSources }) => {\n    return dataSources.ncapi.getCountryByName(name);\n  },\n  CountryByNames: (_, { names }, { dataSources }) => {\n    return names.map((name) => dataSources.ncapi.getCountryByName(name));\n  },\n\n  CountryByDate: async (_, { name, date }, { dataSources }) => {\n    const countryObject = await dataSources.ncapi.getCountryByName(name);\n    return { daterequested: date, ...countryObject };\n  },\n\n  AllStates: (_parent, _args, { dataSources }) => {\n    return dataSources.ncapi.getStates();\n  },\n  StateByName: (_parent, { name }, { dataSources }) => {\n    console.log(name);\n    return dataSources.ncapi.getStatebyName(name);\n  },\n  StateByNames: (_parent, { names }, { dataSources }) => {\n    // console.log(name)\n    return names.map((name) => dataSources.ncapi.getStatebyName(name));\n  },\n  StateByDate: async (_, { name, date }, { dataSources }) => {\n    const stateObject = await dataSources.ncapi.getStatebyName(name);\n    // console.log(name, date.getTime());\n    return { daterequested: date, ...stateObject };\n  },\n  AllCounties: (_parent, _args, { dataSources }) => {\n    return dataSources.ncapi.getCounties();\n  },\n  CountyByName: async (_parent, { name, state }, { dataSources }) => {\n    // console.log('here');\n    // Because the rest query returns an array and we are making sure we only return a single object\n    const countyByName = await dataSources.ncapi.getCountyByName(name, state);\n    // return countyByName\n    // console.log(countyByName);\n    if (countyByName.length > 1) {\n      throw new Error(`${state},${name} returns ambiguous query`);\n    }\n    return countyByName[0];\n  },\n  CountyByNames: async (_parent, { names, states }, { dataSources }) => {\n    ///this is tricky since we are returning an array of promises\n    ///see here https://medium.com/@antonioval/making-array-iteration-easy-when-using-async-await-6315c3225838\n    if (names.length != states.length) {\n      throw new Error(`${states},${names}  must be same length`);\n    }\n    const results = names.map(async (name, index) => {\n      let state = states[index];\n      let countyByName = await dataSources.ncapi.getCountyByName(name, state);\n      if (countyByName.length > 1) {\n        throw new Error(`${state},${name} returns ambiguous query`);\n      }\n      if (countyByName[0] === undefined) {\n        console.error(`${state},${name} returns nothing`);\n        // throw new Error(`${state},${name} returns nothing`);\n      }\n      return countyByName[0];\n    });\n    return await Promise.all(results);\n  },\n  CountyByDate: async (_, { name, state, date }, { dataSources }) => {\n    const countyByName = await dataSources.ncapi.getCountyByName(name, state);\n    // console.log(name, countyByName);\n    if (countyByName.length > 1) {\n      throw new Error(`${state},${name} returns ambiguous query`);\n    }\n    return { daterequested: date, ...countyByName[0] };\n  },\n};\nexport default queryObject;\n"],"file":"query.js"}