{"version":3,"sources":["../src/api.js"],"names":["require","RESTDataSource","CSVAPI","baseURL","countryInfo","get","response","JSONResponse","JSON","parse","iso3","iso2","filteredResponse","filter","key","length","Error","countyInfo","responseJSON","filtedResponse","statename","toLowerCase","State","name","County","NovelCovidAPI","map","obj","datereadable","Date","updated","toDateString","id","potentialIds","_id","Object","index","console","log","keys","timeline","cases","deaths","recovered","result","date","getTime","state","parentcountry","res","states","filtered","province","cummulativeCases","stats","confirmed","cummulativeDeaths","cummulativeRecovered","activeCases","info","lat","coordinates","latitude","lon","longitude","county","counties","reduceCounty","reducedResponse","stateName","dataObject","undefined"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable require-jsdoc */\n//? doesn't suport ES6\nconst { RESTDataSource } = require(\"apollo-datasource-rest\");\nclass CSVAPI extends RESTDataSource {\n  constructor() {\n    super();\n    // need to put this on a CDN\n    this.baseURL =\n      \"https://raw.githubusercontent.com/jwillis0720/covid19api/graphql/graphql-server/locationInfo/\";\n  }\n\n  async getCountryInfo(countryInfo) {\n    const response = await this.get(\"CountryInfo.json\");\n    const JSONResponse = JSON.parse(response);\n    const iso3 = countryInfo.iso3;\n    const iso2 = countryInfo.iso2;\n    const filteredResponse = JSONResponse.filter((key) => {\n      // console.log(key.iso_a3);\n      return key[\"iso_a3\"] === iso3;\n    });\n    if (filteredResponse.length > 1) {\n      throw new Error(`${countryInfo},returns ambiguous for info query`);\n    }\n    return filteredResponse[0];\n  }\n  async getStateInfo() {\n    const response = await this.get(\"StateInfoPop.json\");\n    return JSON.parse(response);\n  }\n  async getCountyInfo(countyInfo) {\n    const response = await this.get(\"CountyInfo.json\");\n    const responseJSON = JSON.parse(response);\n    let filtedResponse = [];\n    filtedResponse = responseJSON\n      .filter(\n        (key) => countyInfo.statename.toLowerCase() == key.State.toLowerCase()\n      )\n      .filter(\n        (key) => countyInfo.name.toLowerCase() == key.County.toLowerCase()\n      );\n    if (filtedResponse.length > 1) {\n      throw new Error(`${countyInfo},returns ambiguous for info query`);\n    }\n    // console.log(filtedResponse);\n    return filtedResponse;\n  }\n}\n\nclass NovelCovidAPI extends RESTDataSource {\n  constructor() {\n    super();\n    this.baseURL = \"https://corona.lmao.ninja/v2/\";\n  }\n\n  async getCountries() {\n    const response = await this.get(\"countries\");\n    return response.map((obj) => {\n      return { ...obj, datereadable: new Date(obj.updated).toDateString() };\n    });\n  }\n\n  async getCountrybyID(id) {\n    const response = await this.get(`countries/${id}`);\n    return {\n      ...response,\n      datereadable: new Date(response.updated).toDateString(),\n    };\n  }\n\n  async getCountryByName(name) {\n    const response = await this.get(`countries/${name}?strict=false`);\n    return {\n      ...response,\n      datereadable: new Date(response.updated).toDateString(),\n    };\n  }\n\n  async getTimeLinebyCountry(countryInfo) {\n    // console.log(countryInfo.iso3);\n    const potentialIds = [countryInfo._id, countryInfo.iso3, countryInfo.iso2];\n\n    let response = Object();\n    for (const index of potentialIds) {\n      // console.log(index);\n      try {\n        response = await this.get(`historical/${index}?lastdays=all`);\n        break;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    if (Object.keys(response).length === 0) {\n      return [];\n    }\n\n    // console.log(response);\n    const { cases, deaths, recovered } = response.timeline;\n    const result = Object.keys(cases).map((date) => ({\n      date: new Date(date).getTime(),\n      datereadable: new Date(date).toDateString(),\n      cases: cases[date],\n      deaths: deaths[date],\n      recovered: recovered[date],\n      countryInfo: [countryInfo],\n    }));\n    return result;\n  }\n\n  async getStates() {\n    // /Everything from this API comes from the USA\n    const response = await this.get(\"states/\");\n    return response.map((state) => {\n      return { ...state, parentcountry: \"USA\" };\n    });\n  }\n\n  async getStatebyName(name) {\n    // /Everything from this API comes from the USA\n    const res = await this.get(`states/${name}`);\n    return { ...res, parentcountry: \"USA\" };\n  }\n\n  async getTimeLinebyState(name) {\n    const response = await this.get(\"nyt/states\");\n    return response\n      .filter((states) => {\n        return states.state === name;\n      })\n      .map((filtered) => {\n        return {\n          ...filtered,\n          date: new Date(filtered.date).getTime(),\n          datereadable: new Date(filtered.date).toDateString(),\n        };\n      });\n  }\n\n  async getYesterday(name) {\n    // console.log(name);\n    const response = await this.get(`states/${name}?yesterday=true`);\n    return response;\n  }\n\n  reduceCounty(key) {\n    return {\n      statename: key.province,\n      cummulativeCases: key.stats.confirmed,\n      cummulativeDeaths: key.stats.deaths,\n      cummulativeRecovered: key.stats.recovered,\n      activeCases: key.stats.confirmed - key.stats.recovered - key.stats.deaths,\n      info: {\n        lat: key.coordinates.latitude,\n        lon: key.coordinates.longitude,\n        name: key.county,\n        statename: key.province,\n      },\n      ...key,\n    };\n  }\n\n  async getCounties() {\n    const response = await this.get(\"jhucsse/counties\");\n    const counties = response.map((key) => {\n      return this.reduceCounty(key);\n    });\n\n    return counties;\n  }\n\n  async getCountyByName(name, state) {\n    const response = await this.get(`jhucsse/counties/${name}`);\n    const filtedResponse = response.filter((key) => key.province === state);\n    const reducedResponse = filtedResponse.map((key) => {\n      return this.reduceCounty(key);\n    });\n    return await reducedResponse;\n    // console.log(reducedResponse);\n  }\n\n  async getCountyTimeLineByState(county) {\n    console.log(county.statename);\n    const stateName = county.statename.toLowerCase();\n    const response = await this.get(`historical/usacounties/${stateName}`);\n    const filtedResponse = response.filter(\n      (key) => key.county === county.county.toLowerCase()\n    );\n    console.log(filtedResponse);\n    // recovered on found in the counties, we should find a way to check that\n    const { cases, deaths, recovered } = filtedResponse[0].timeline;\n    // console.log(cases);\n    const result = Object.keys(cases).map((date) => {\n      const dataObject = {\n        date: new Date(date).getTime(),\n        datereadable: new Date(date).toDateString(),\n        cases: cases[date],\n        deaths: deaths[date],\n      };\n      if (recovered != undefined) {\n        dataObject.recovered = recovered[date];\n      } else {\n        dataObject.recovered = null;\n      }\n      return dataObject;\n    });\n    return await result;\n  }\n  // }\n}\n\nexport { NovelCovidAPI, CSVAPI };\n"],"file":"api.js"}